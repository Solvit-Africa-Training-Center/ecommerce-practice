version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-practice-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DEV_DATABASE}
      POSTGRES_USER: ${DEV_USERNAME}
      POSTGRES_PASSWORD: ${DEV_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DEV_USERNAME} -d ${DEV_DATABASE}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: ecommerce-practice-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Ecommerce Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce-practice-app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5500
      # Database
      DEV_DATABASE: ${DEV_DATABASE}
      DEV_USERNAME: ${DEV_USERNAME}
      DEV_PASSWORD: ${DEV_PASSWORD}
      DEV_HOST: postgres
      DEV_PORT: 5432
      # Redis configuration - using internal Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ''
      REDIS_DB: 0
      # JWT Secret
      JWT_SECRET: ${JWT_SECRET:-mysecretkey}
    ports:
      - '5500:5500'
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
